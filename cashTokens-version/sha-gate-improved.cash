pragma cashscript ^0.10.0;

// Sha-gate covenant enables trust-minimized briding to Smart BCH

// One Sha-gate covenant can bridge any number of deposits to the SBCH sidechain.
// The return from the sidechain to the mainchain works in 2 steps 
// First m-of-n operators propose a withdrawal tranasction from the sidechain covenant.
// Then miners have a fixed window to vote on the proposal.
// If a large percentage (now set to 66%Â°) approves of the withdrawal when the voting period ends 
// then the withdrawal gets processed. The withdrawl transaction is to a covenant which batches withdrawals 
// to any number of addresses. The Sha-gate would manage a large amount of BCH so withdrawals 
// to the mainchain can be slow so there is plenty of time for miner voting within the window.
// The withdrawal function of the contract can also be used to perform L1 burning of BCH
// and to upgrade the contract code or remove malicious/compromised operators.

// Chosen security parameters:
// - M-of N for operator keys: 3-of-5 (can easily be extended to 5-of-7 or even larger)
// - Voting period: 2016 blocks (~2 weeks worth of blocks), after which finishWithdrawal is enabled
// - Agree-voting threshold for valid withdrawal: 66%
// - Withdrawal period: 72 blocks (.5 day worth of blocks), after which initWithdrawal is enabled
//   If no votes are placed at all the withdrawal is also valid.
// - Minimum bridge amount: 10000 sats

// Mutable NFT Commitment contract state (max 40 bytes)
// bytes8 startPeriodBytes
// bytes20 P2SH20 payout covenant
// bytes8 amount
// bytes2 voteCountBytes

// See notes on 20byte P2SHash collision vulnerability

// Opcode count: 194
// Bytesize: 349

contract Sha_gate(
   // constant constructor parameters
   bytes20 hashOperatorKeys,
) {
   // lock extra funds in the covenant to bridge them
   function lock(
   ) {
      // require the SHA-gate covenant to be at index0
      // allows for more than 2 inputs
      require(this.activeInputIndex == 0);
      // briding can have change output so SBCH amount is difference in contract value before and after
      int amountBridged = tx.outputs[0].value - tx.inputs[0].value;
      // enforces minimum amount for the bridge
      // implicity requires tx.outputs[0].value > tx.inputs[0].value
      require(amountBridged > 10000);
      // bytecode and token-state of SHA-gate covenant should not change
      require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);
      require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);
      require(tx.outputs[0].nftCommitment == tx.inputs[0].nftCommitment);
   }

   // initialize a withdrawal proposal
   function initWithdrawal(
      sig s0, 
      sig s1,  
      sig s2,
      pubkey pk0,
      pubkey pk1,
      pubkey pk2,
      pubkey pk3,
      pubkey pk4,
      bytes28 newPayout // bytes20 P2SH + bytes8 amount
   ) {
      // require the provided operator pks to match hashOperatorKeys
      // does not curently check that they are all the right length
      require(hash160(pk0+pk1+pk2+pk3+pk4) == hashOperatorKeys);
      // require 3-of-5 operators to sign the tx to the new state
      require(checkMultiSig([s0,s1,s2],[pk0,pk1,pk2,pk3,pk4]));

      // require the SHA-gate covenant to be at index0
      require(this.activeInputIndex == 0);

      // read contract state from nftCommitment
      bytes startPeriodBytes = tx.inputs[0].nftCommitment.split(8)[0];
      
      // initWithdrawal can only be called at least 2088 blocks after startPeriod
      // when initWithdrawal is called late, the following voting period is shorter by the number of blocks
      require(tx.time >= int(startPeriodBytes) + 2088); // startPeriod + (voting period + withdrawal period)

      // check length newPayout before adding to state
      require(newPayout.length == 28);
      // recreate SHA gate contract with new state
      int amount = tx.inputs[0].value - 1000; // 1000 is hardcoded fee
      require(tx.outputs[0].value == amount);
      require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);
      require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);
      bytes newContractState = 0x0000 + newPayout + bytes8(tx.locktime);
      require(tx.outputs[0].nftCommitment == newContractState);
   }

   // miners vote for whether payout of amount to P2SH can be sent or not
   function vote(
      bytes coinbaseTx,
      bool agree
   ) {
      // get the coinbaseTxID to check again hash of coinbaseTx
      bytes coinbaseTxID = tx.inputs[1].outpointTransactionHash;
      require(hash256(coinbaseTx) == coinbaseTxID);
      // check parent transaction is coinbase tx by checking
      // version of 1, inputcount of 1, txID of all zeroes, and the vout all f's
      bytes32 allZeroTxid= bytes32(0); // saves a ton on bytesize
      require(coinbaseTx.split(41)[0] == 0x0100000001 + allZeroTxid + 0xffffffff); // 5+32+4 = 41
      // use coinbase output with vout 0 as input on index 1
      // this disables the ability for outputs from the same coinbase to vote multiple times
      // each SHA-gate covenant should use a different hardcoded number for the coinbase vout.
      require(tx.inputs[1].outpointIndex == 0);
      
      // parse coinbaseTx for 3 bytes blockheight in coinbase data field after 0x03, see BIP 0034
      bytes coinbaseBlockHeight = coinbaseTx.split(43)[1].split(3)[0]; // 4+1+32+4+1+1 = 43

      // require the SHA-gate covenant to be at index0
      require(this.activeInputIndex == 0);

      // read contract state from nftCommitment
      bytes startPeriodBytes, bytes remainingState = tx.inputs[0].nftCommitment.split(8);
      bytes voteCountBytes = remainingState.split(28)[1];

      // height of the coinbase input must be greater than startPeriod
      require(int(coinbaseBlockHeight) > int(startPeriodBytes));

      int voteCount = int(voteCountBytes);
      // implements 66% agree-voting threshold
      if(agree) voteCount = voteCount + 1;
      else voteCount = voteCount - 2;
      bytes2 newVoteCountBytes = bytes2(voteCount);

      // recreate SHA gate contract with new state
      int amount = tx.inputs[0].value - 1000; // 1000 is hardcoded fee
      require(tx.outputs[0].value == amount);
      require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);
      require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);
      bytes newContractState = newVoteCountBytes + tx.inputs[0].nftCommitment.split(2)[1];
      require(tx.outputs[0].nftCommitment == newContractState);
   }

   // finish the withdrawal process
   function finishWithdrawal(
   ) {
      // require the SHA-gate covenant to be at index0
      require(this.activeInputIndex == 0);

      // read contract state from nftCommitment
      bytes startPeriodBytes, bytes remainingState = tx.inputs[0].nftCommitment.split(8);
      bytes payoutState, bytes voteCountBytes = remainingState.split(28);

      bytes20 payoutP2SH, bytes8 amountPayoutBytes = payoutState.split(23);
      int amountPayout = int(amountPayoutBytes); // saves one opcode
      require(tx.outputs[1].value == amountPayout);
      require(tx.outputs[1].lockingBytecode == new LockingBytecodeP2SH20(payoutP2SH));
      // finishWithdrawal can only be called at least 2016 blocks after startPeriod
      require(tx.time >= int(startPeriodBytes) + 2016); // startPeriod + voting period
      require(int(voteCountBytes) >= 0);

      // recreate SHA gate contract with new state
      int amountLeft = tx.inputs[0].value - amountPayout - 1000; // 1000 is hardcoded fee
      require(tx.outputs[0].value == amountLeft);
      require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);
      require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);
      // clear votes and payout
      bytes28 allZeroPayout = bytes28(0); // saves a ton on bytesize
      bytes newContractState = 0x0000 + allZeroPayout + tx.inputs[0].nftCommitment.split(30)[1];
      require(tx.outputs[0].nftCommitment == newContractState);
   }
}
